<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CODERFE</title>
  <subtitle>Reading Coding Thinking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coderfe.cn/"/>
  <updated>2016-08-17T14:37:18.868Z</updated>
  <id>http://coderfe.cn/</id>
  
  <author>
    <name>coderfee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【React】初识React —— 评论框组件</title>
    <link href="http://coderfe.cn/2016/08/15/2016-08-15-react-comment-box/"/>
    <id>http://coderfe.cn/2016/08/15/2016-08-15-react-comment-box/</id>
    <published>2016-08-15T19:53:31.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>React 是一个用来构建用户界面的 Javascript 库，虽然很早就听说过火热的 React 框架，但是一直没有时间学习，现在终于有时间来静下心来学习一下。上周跟着官网的的例子写了一个评论组件，理解的不是太透彻，在此记录下来，加深理解。</p>
</blockquote>
<a id="more"></a>
<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><ol>
<li><p>我们的 <code>index.html</code> 文件是这样的，由于浏览器不能直接解析 React 的语法，因此我们要引用几个 React 相关的 Js 库才能在浏览器中看到效果。同时要注意底部 <code>script</code> 标签的 <code>type</code> 属性是 <code>text/babel</code> 。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React Tutorial<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/react@15.3.0/dist/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/react-dom@15.3.0/dist/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/babel-core@5.8.38/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/jquery@3.1.0/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/remarkable@1.6.2/dist/remarkable.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></div><div class="line">      // 我们的 js 代码将写在这里</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>Python / Nodejs</code>  启动一个小型的本地服务器，在本目录下运行 <code>python server.py / node server.js</code> ，然后在浏览器中打开 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 就可以预览。下载 <a href="https://github.com/reactjs/react-tutorial/" target="_blank" rel="external">server.py/js</a> 。</p>
</li>
</ol>
<h2 id="分析组件结构"><a href="#分析组件结构" class="headerlink" title="分析组件结构"></a>分析组件结构</h2><p>由于 React 中充满着模块化、组件化的思想，因此在构建一个组件时应该首先分析它的结构，并将其拆分成更小的组件，这样一来就可以将小组件组合成一个模块。以评论框组件为例分析一下：</p>
<ul>
<li>CommentBox<ul>
<li>CommentList<ul>
<li>Comment</li>
</ul>
</li>
<li>CommentForm</li>
</ul>
</li>
</ul>
<h2 id="CommentBox-组件"><a href="#CommentBox-组件" class="headerlink" title="CommentBox 组件"></a>CommentBox 组件</h2><p>这是整个评论框的最外层的一个盒子，所以它只包含一个 <code>div</code> ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var CommentBox = React.createClass() &#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;commentBox&quot;&gt;</div><div class="line">        &lt;h1&gt;Comments&lt;/h1&gt;</div><div class="line">        &lt;CommentList /&gt;</div><div class="line">        &lt;CommentForm /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;CommentBox /&gt;,</div><div class="line">  document.getElementById(&apos;content&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="CommentList-组件"><a href="#CommentList-组件" class="headerlink" title="CommentList 组件"></a>CommentList 组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var CommentList = React.createClass() &#123;</div><div class="line">  render: function() &#123;</div><div class="line">  	return (</div><div class="line">      &lt;div className=&quot;commentList&quot;&gt;</div><div class="line">      	&lt;Comment /&gt;</div><div class="line">        &lt;Comment /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Comment-组件"><a href="#Comment-组件" class="headerlink" title="Comment 组件"></a>Comment 组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var Comment = React.createClass() &#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;comment&quot;&gt;</div><div class="line">      	&lt;h2 className=&quot;commentAuthor&quot;&gt;&lt;/h2&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="CommentForm-组件"><a href="#CommentForm-组件" class="headerlink" title="CommentForm 组件"></a>CommentForm 组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var CommentForm = React.createClass() &#123;</div><div class="line">  render: function() &#123;</div><div class="line">  	return (</div><div class="line">  	  &lt;form className=&quot;commentForm&quot;&gt;</div><div class="line">      	&lt;input type=&quot;text&quot; placeholder=&quot;Your name...&quot; /&gt;</div><div class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;Your comment&quot; /&gt;</div><div class="line">        &lt;input type=&quot;submit&quot; value=&quot;POST&quot; /&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">  	);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="基本组件构建完成"><a href="#基本组件构建完成" class="headerlink" title="基本组件构建完成"></a>基本组件构建完成</h2><p>以上就是我们构建的四个小组件，将他们组合起来就能够组成一个评论框模块，但是目前这个模块并没有交互的功能，接下来我们将改造代码，让它能够展示并添加评论！</p>
<h2 id="添加-markdown-支持"><a href="#添加-markdown-支持" class="headerlink" title="添加 markdown 支持"></a>添加 markdown 支持</h2><p>改造 <strong>Comment</strong> 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var Comment = React.createClass() &#123;</div><div class="line">  rawMarkup: function() &#123;</div><div class="line">  	var md = new Remarkable();</div><div class="line">    var rawMarkup = md.render(this.props.children.toString());</div><div class="line">    return &#123;__html: rawMarkup&#125;;</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;comment&quot;&gt;</div><div class="line">      	&lt;h2 className=&quot;commentAuthor&quot;&gt;</div><div class="line">          &#123;this.props.author&#125;</div><div class="line">        &lt;/h2&gt;</div><div class="line">        &lt;span dangerouslySetInnerHtml=&#123;this.Markup()&#125;&gt;&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="从服务器加载数据"><a href="#从服务器加载数据" class="headerlink" title="从服务器加载数据"></a>从服务器加载数据</h2><p>通过 <strong>json</strong> 格式的数据来存储和展示评论，因此我们要从服务器获取 <strong>json</strong> 数据，<strong>json</strong> 数据格式如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;id: 1, author: "Lisa", text: "This is one comment"&#125;,</div><div class="line">  &#123;id: 2, author: "Simon", text: "This is **another** comment"&#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>然后我们再修改 <strong>CommentBox</strong> 的代码，会接触到了一个新的概念 <strong>state</strong> ，<strong>state</strong> 相对于 <strong>props</strong> 则是可变的，可以通过调用 <code>this.setState</code> 方法来改变，当 <strong>state</strong> 发生改变时，组件也会重新渲染：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var CommentBox = React.createClass() &#123;</div><div class="line">  loadCommentsFromServer: function() &#123;</div><div class="line">  	$.ajax(&#123;</div><div class="line">  	  url: this.props.url,</div><div class="line">      type: &apos;GET&apos;,</div><div class="line">      dataType: &apos;json&apos;,</div><div class="line">      cache: false,</div><div class="line">      success: function(data) &#123;</div><div class="line">  		this.setState(&#123;data: data&#125;);</div><div class="line">true  &#125;.bind(this),</div><div class="line">      error: function(xhr, status, err) &#123;</div><div class="line">  		console.error(this.props.url, status, err.toString());</div><div class="line">true  &#125;.bind(this)</div><div class="line">  	&#125;);</div><div class="line">  &#125;,</div><div class="line">  getInitialState: function() &#123;</div><div class="line">    return &#123;data: []&#125;;</div><div class="line">  &#125;,</div><div class="line">  componentDidMount: function() &#123;</div><div class="line">  	this.loadCommentsFromServer();</div><div class="line">    setInterval(this.loadCommentsFromServer, this.pollInterval)</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;commentBox&quot;&gt;</div><div class="line">        &lt;h1&gt;Comments&lt;/h1&gt;</div><div class="line">        &lt;CommentList data=&#123;this.state.data&#125; /&gt;</div><div class="line">        &lt;CommentForm /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;CommentBox url=&quot;api/comments&quot; pollInterval=&#123;2000&#125; /&gt;,</div><div class="line">  document.getElementById(&apos;content&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在上面的代码中，<code>loadCommentsFromServer</code> 使用 <strong>ajax</strong> 从服务器获取数据，<code>getInitialState</code> 只会执行一次，用来设置组件生命周期的初始状态。<code>comonentDidMount</code> 方法则会在组件第一次渲染完成之后自动调用。<code>setInterval</code> 则会每隔 2s 从服务器更新一次数据。</p>
<p>现在数据已经渲染到了<strong>CommenBox</strong> 即 <strong>CommentList</strong> 的父级组件上了，所以我们在 <strong>CommentList</strong> 上可以通过 <strong>props</strong> 属性来获得 <strong>data</strong> 数据，修改 <strong>CommentList</strong> 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var CommentList = React.createClass() &#123;</div><div class="line">  render: function() &#123;</div><div class="line">    var commentNodes = this.props.data.map(function(comment) &#123;</div><div class="line">  	  return (</div><div class="line">      	&lt;Comment author=&#123;comment.author&#125; key=&#123;comment.id&#125;&gt;</div><div class="line">          &#123;comment.text&#125;</div><div class="line">        &lt;/Comment&gt;</div><div class="line">      );</div><div class="line">    &#125;);</div><div class="line">  	return (</div><div class="line">      &lt;div className=&quot;commentList&quot;&gt;</div><div class="line">        &#123;commentNodes&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="评论展示功能完成"><a href="#评论展示功能完成" class="headerlink" title="评论展示功能完成"></a>评论展示功能完成</h2><p>以上，利用 <strong>ajax</strong> 从服务器动态获取数据，并且每隔 2s 更新一次，然后通过设置 <strong>state</strong> 和 <strong>props</strong> 把数据渲染出来，评论的展示功能基本完成，下面将会添加<strong>新增评论的功能</strong>。</p>
<h2 id="添加新的评论"><a href="#添加新的评论" class="headerlink" title="添加新的评论"></a>添加新的评论</h2><p>新增评论主要是对 <strong>form</strong> 表单的操作，因此在这一步我们需要修改 <strong>CommentForm</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">var CommentForm = React.createClass() &#123;</div><div class="line">  getInitialState: function() &#123;</div><div class="line">    return &#123;author: &apos;&apos;, text: &apos;&apos;&#125;;</div><div class="line">  &#125;,</div><div class="line">  handleAuthorChange: function(e) &#123;</div><div class="line">  	this.setState(&#123;author: e.target.value&#125;)</div><div class="line">  &#125;,</div><div class="line">  handleTextChange: function(e) &#123;</div><div class="line">  	this.setState(&#123;text: e.target.value&#125;)</div><div class="line">  &#125;,</div><div class="line">  handleSubmit: function(e) &#123;</div><div class="line">  	e.preventDefault();</div><div class="line">    var author = this.state.authot.trim();</div><div class="line">    var text = this.state.text.trim();</div><div class="line">    if (!author || !text) &#123;</div><div class="line">  	  return;</div><div class="line">true&#125;</div><div class="line">    this.props.onCommentSubmit(&#123;author: author, text: text&#125;);</div><div class="line">    this.setState(&#123;author: &apos;&apos;, text: &apos;&apos;&#125;);</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">  	return (</div><div class="line">  	  &lt;form className=&quot;commentForm&quot; onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">      	&lt;input</div><div class="line">          type=&quot;text&quot;</div><div class="line">          placeholder=&quot;Your name...&quot;</div><div class="line">          value=&#123;this.state.author&#125;</div><div class="line">          onChange=&#123;this.handleAuthorChange&#125; /&gt;</div><div class="line">        &lt;input</div><div class="line">          type=&quot;text&quot;</div><div class="line">          placeholder=&quot;Your comment&quot;</div><div class="line">          value=&#123;this.state.text&#125;</div><div class="line">          onChange=&#123;this.handleTextChange&#125; /&gt;</div><div class="line">        &lt;input type=&quot;submit&quot; value=&quot;POST&quot; /&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">  	);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>此时，当新增一条评论时，我们需要立即展示出来即需要刷新 <strong>CommentBox</strong> ，所以修改 <strong>CommentBox</strong> 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">var CommentBox = React.createClass() &#123;</div><div class="line">  loadCommentsFromServer: function() &#123;</div><div class="line">  	$.ajax(&#123;</div><div class="line">  	  url: this.props.url,</div><div class="line">      type: &apos;GET&apos;,</div><div class="line">      dataType: &apos;json&apos;,</div><div class="line">      cache: false,</div><div class="line">      success: function(data) &#123;</div><div class="line">  		this.setState(&#123;data: data&#125;);</div><div class="line">true  &#125;.bind(this),</div><div class="line">      error: function(xhr, status, err) &#123;</div><div class="line">  		console.error(this.props.url, status, err.toString());</div><div class="line">true  &#125;.bind(this)</div><div class="line">  	&#125;);</div><div class="line">  &#125;,</div><div class="line">  handleCommentSubmit: function(comment) &#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">      url: this.props.url,</div><div class="line">      dataType: &apos;json&apos;,</div><div class="line">      type: &apos;POST&apos;,</div><div class="line">      data: comment,</div><div class="line">      success: function(data) &#123;</div><div class="line">        this.setState(&#123;data: data&#125;);</div><div class="line">      &#125;.bind(this),</div><div class="line">      error: function(xhr, status, err) &#123;</div><div class="line">        console.error(this.props.url, status, err.toString());</div><div class="line">      &#125;.bind(this)</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  getInitialState: function() &#123;</div><div class="line">    return &#123;data: []&#125;;</div><div class="line">  &#125;,</div><div class="line">  componentDidMount: function() &#123;</div><div class="line">  	this.loadCommentsFromServer();</div><div class="line">    setInterval(this.loadCommentsFromServer, this.pollInterval)</div><div class="line">  &#125;,</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;commentBox&quot;&gt;</div><div class="line">        &lt;h1&gt;Comments&lt;/h1&gt;</div><div class="line">        &lt;CommentList data=&#123;this.state.data&#125; /&gt;</div><div class="line">        &lt;CommentForm onCommentSubmit=&#123;this.handleCommentSubmit&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;CommentBox url=&quot;api/comments&quot; pollInterval=&#123;2000&#125; /&gt;,</div><div class="line">  document.getElementById(&apos;content&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>嗯。。。终于完成了一个基本的<strong>评论框模块</strong>，它用 <strong>json</strong> 来存储数据，不仅能够展示评论，而且能够新增评论。这样，利用 React 的组件化思维来完成一个模块，体验确实很棒，逻辑也显的比较清楚。但这只是开始，要熟练使用 React 更需要一个不断学习的过程。加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;React 是一个用来构建用户界面的 Javascript 库，虽然很早就听说过火热的 React 框架，但是一直没有时间学习，现在终于有时间来静下心来学习一下。上周跟着官网的的例子写了一个评论组件，理解的不是太透彻，在此记录下来，加深理解。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://coderfe.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>【译】在你的 WordPress 项目中使用 Let&#39;s Encrypt SSL</title>
    <link href="http://coderfe.cn/2016/08/11/translate-encrypt/"/>
    <id>http://coderfe.cn/2016/08/11/translate-encrypt/</id>
    <published>2016-08-11T23:13:35.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>随着 HTTP2.0 的发展，HTTPS 也变得流行起来，本来想为我的这个博客添加 HTTPS ，但是受限于服务器的原因，不能安装 SSL 证书。这篇文章算是为以后启用 HTTPS 吹响号角吧！</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>原文链接：<a href="http://code.tutsplus.com/tutorials/using-lets-encrypt-ssl-with-your-wordpress-project--cms-22303" target="_blank" rel="external">Using Let’s Encrypt SSL With Your WordPress Project</a></p>
</blockquote>
<h2 id="什么是-Let’s-Encrypt？"><a href="#什么是-Let’s-Encrypt？" class="headerlink" title="什么是 Let’s Encrypt？"></a>什么是 Let’s Encrypt？</h2><p>多年来购买、更新、安装以及管理 SSL 证书，其昂贵的价格和复杂性让我不知所措。现在， <a href="https://letsencrypt.org" target="_blank" rel="external">Let’s Encrypt</a> 使得它相当简单而且免费。</p>
<p>Let’s Encrypt 是由加州公益组织称为互联网安全研究小组带来的新兴的、自由的、自动化的、开放的证书颁发机构，它也有非营利性的成分。</p>
<p>它的目标是让 HTTPS 成为浏览器的默认协议，从而更好地确网络保隐私和安全。 Mozilla 和 Electronic Frontier Foundation（电子前沿基金会） 是它的两个主要赞助商：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/sponsors.jpg" alt="Whats Lets Encrypt Platinum sponsors"></p>
<p>Let’s Encrypt 在十二月进入公测, 所以现在我能很容易地指导你去探索它的服务。</p>
<p>在这篇教程中, 我将带你在我的几个网站中安装 Let’s Encrypt , 包括我的 WordPress 咨询网站, <a href="http://lookahead.io" target="_blank" rel="external">http://lookahead.io</a> 很快就会成为 <a href="https://lookahead.io" target="_blank" rel="external">https://lookahead.io</a> 。</p>
<p>在我们开始之前，请记住，我会参与下面的讨论。如果你有问题或者建议，请在下面发表评论或者  <a href="https://twitter.com/intent/user?screen_name=reifman" target="_blank" rel="external">contact me on Twitter @reifman</a>.</p>
<h2 id="Let’s-Encrypt-功能总结"><a href="#Let’s-Encrypt-功能总结" class="headerlink" title="Let’s Encrypt 功能总结"></a>Let’s Encrypt 功能总结</h2><p>Let’s Encrypt 运行在使用 Python 的 Apache 服务器上，以此来实现自动注册和更新证书，简化了网站激活 HTTPS 的过程，包括 WordPress 。</p>
<p>这里有 Let’s Encrypt 的主要优势:</p>
<ul>
<li><p><strong>免费：</strong> 任何一个域名都可以无成本地注册一个受信任的证书。</p>
</li>
<li><p><strong>自动：</strong> 一个 Apache Web 服务器可以轻松获得证书, 安全配置, 并且自动管理更新。</p>
</li>
<li><p><strong>安全：</strong> 无论是作为一个证书颁发机构，还是帮助维护服务器上的网站安全，Let’s Encrypt 将推动 TLS 安全最佳实践。</p>
</li>
<li><p><strong>透明：</strong> 证书的所有交易记录公开，并且可供查阅。</p>
</li>
<li><p><strong>开放：</strong> 自动发布和更新协议将作为一个开放的标准。</p>
</li>
<li><p><strong>协作：</strong> Let’s Encrypt 是社区的努力，造福每一个人。</p>
</li>
</ul>
<h2 id="使用-Let’s-Encrypt-安装-SSL"><a href="#使用-Let’s-Encrypt-安装-SSL" class="headerlink" title="使用 Let’s Encrypt 安装 SSL"></a>使用 Let’s Encrypt 安装 SSL</h2><p>让我们开始，通过更新我的服务器，Apache Ubuntu。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p>如果你没有在你的服务器上安装 Git，用 Git 来安装 Let’s Encrypt 是最好的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<p>一旦安装完，把 <a href="https://github.com/letsencrypt/letsencrypt" target="_blank" rel="external">Let’s Encrypt software</a> 克隆到 Apache 第三方应用程序的 opt 子目录下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt</div></pre></td></tr></table></figure>
<p>首先，我将在 Fever 新闻阅读器上尝试安装 Let’s Encrypt，而不是 WordPress。我把它托管在 <a href="http://fever.lookahead.io" target="_blank" rel="external">http://fever.lookahead.io</a> ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt/letsencrypt</div><div class="line">./letsencrypt-auto --apache -d fever.lookahead.io</div></pre></td></tr></table></figure>
<h3 id="设置向导"><a href="#设置向导" class="headerlink" title="设置向导"></a>设置向导</h3><p>开始时， 会要求填写电子邮件：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/email%20addr.jpg" alt="Lets Encrypt Installation Email Request"></p>
<p>然后显示服务条款：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/install%20-%20tos.jpg" alt="Lets Encrypt Installation Terms of Service"></p>
<p>Let’s Encrypt 给你提供了将 HTTPS 作为第二选项，或者直接使用 HTTPS 将接管所有流量的连个选项：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/install%20-%20exclusive.jpg" alt="Lets Encrypt Select HTTPS mode"></p>
<p>你在几分钟内搞定：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/install%20-%20congrats.jpg" alt="Lets Encrypt Congratulations"></p>
<p>你也会看到一些证书到期和更新的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">IMPORTANT NOTES:</div><div class="line"> - Congratulations! Your certificate and chain have been saved at</div><div class="line">   /etc/letsencrypt/live/lookahead.io/fullchain.pem. Your cert will</div><div class="line">   expire on 2016-05-03\. To obtain a new version of the certificate in</div><div class="line">   the future, simply run Let&apos;s Encrypt again.</div><div class="line"> - Your account credentials have been saved in your Let&apos;s Encrypt</div><div class="line">   configuration directory at /etc/letsencrypt. You should make a</div><div class="line">   secure backup of this folder now. This configuration directory will</div><div class="line">   also contain certificates and private keys obtained by Let&apos;s</div><div class="line">   Encrypt so making regular backups of this folder is ideal.</div><div class="line"> - If you like Let&apos;s Encrypt, please consider supporting our work by:</div><div class="line"></div><div class="line">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</div><div class="line">   Donating to EFF:                    https://eff.org/donate-le</div></pre></td></tr></table></figure>
<h3 id="在-WordPress-上安装"><a href="#在-WordPress-上安装" class="headerlink" title="在 WordPress 上安装"></a>在 WordPress 上安装</h3><p>在我的 WordPress 咨询网站安装 Let’s Encrypt SSL，同样非常简单。只有那么一丢丢地不同，我想让 Let’s Encrypt 能更好地支持 www 子域名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt/letsencrypt</div><div class="line">./letsencrypt-auto --apache -d lookahead.io -d www.lookahead.io</div></pre></td></tr></table></figure>
<p>你现在可以去访问了，是 HTTP 或者 HTTPS， 将会在这里终结，<a href="https://lookahead.io" target="_blank" rel="external">https://lookahead.io</a> ：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/lookahead%20home.jpg" alt="Lets Encrypt Lookahead Consulting"></p>
<h3 id="SSL-报告"><a href="#SSL-报告" class="headerlink" title="SSL 报告"></a>SSL 报告</h3><p>你可以去类似 <a href="https://www.ssllabs.com" target="_blank" rel="external">Qualys SSL Labs</a> 的网站来获得你的网站的 SSL 报告。</p>
<p><a href="https://www.ssllabs.com/ssltest/analyze.html?d=fever.lookahead.io" target="_blank" rel="external">https://www.ssllabs.com/ssltest/analyze.html?d=fever.lookahead.io</a></p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/qs%20-%20ssl.jpg" alt="Lets Encrypt SSL Qualys Labs"></p>
<p>这儿是认证页面：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/ssl-auth.jpg" alt="Lets Encrypt SSL Qualys Labs Authentication"></p>
<h3 id="证书自动更新"><a href="#证书自动更新" class="headerlink" title="证书自动更新"></a>证书自动更新</h3><p>自动更新也相当简单。首先，我们获取更新脚本，并赋予它执行权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo curl -L -o /usr/local/sbin/le-renew http://do.co/le-renew</div><div class="line">sudo chmod +x /usr/local/sbin/le-renew</div></pre></td></tr></table></figure>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/auto%20renewal.jpg" alt="Lets Encrypt Set up auto renewals"></p>
<p>让后为每个域名运行这个脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo le-renew lookahead.io</div><div class="line">Checking expiration date for fever.lookahead.io...</div><div class="line">The certificate is up to date, no need for renewal (89 days left).</div></pre></td></tr></table></figure>
<p>你可以设置一个 cron job 来有规律地运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure>
<p>添加这行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">30 2 * * 1 /usr/local/sbin/le-renew lookahead.io &gt;&gt; /var/log/le-renew.log</div></pre></td></tr></table></figure>
<h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><p>我想分享一下我遇到的问题，当我为 <a href="http://communitystarter.org" target="_blank" rel="external">Community Starter open-source project</a> （都是根域名和 www）安装 SSL 时，Let’s Encrypted 给出这个错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">We were unable to find a vhost with a ServerName or Address of</div><div class="line">    │ www.communitystarter.org.</div><div class="line">    │ Which virtual host would you like to choose?</div></pre></td></tr></table></figure>
<p>我在配置文件里设置了一个通配符别名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">        ServerName communitystarter.org</div><div class="line">        ServerAlias *.communitystarter.org</div><div class="line">        DocumentRoot /var/www/communitystarter/</div></pre></td></tr></table></figure>
<p>这个变化修复了它，为 www 增加一个别名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">        ServerName communitystarter.org</div><div class="line">        ServerAlias www.communitystarter.org</div><div class="line">        ServerAlias *.communitystarter.org</div><div class="line">        DocumentRoot /var/www/communitystarter/</div></pre></td></tr></table></figure>
<p>然后，主页嵌入 Vimeo 视频失败：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/no%20video.jpg" alt="Lets Encrypt Vimeo Not Working with HTTPS"></p>
<p>我不得不使 iframe 里的 Vimeo 播放器使用 HTTPS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- ***************** - START Video - ***************** --&gt;</div><div class="line">&lt;div class=&quot;video-wrap video_left&quot;&gt;</div><div class="line">&lt;div class=&quot;video-main&quot;&gt;</div><div class="line">&lt;div class=&quot;video-frame&quot;&gt;</div><div class="line">&lt;iframe src=&quot;https://player.vimeo.com/video/37639283&quot; title=&quot;introduction to newscloud&apos;s community starter&quot; scrolling=&quot;no&quot; width=&quot;572&quot; height=&quot;312&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;/div&gt;&lt;!-- end video-frame --&gt;</div><div class="line">&lt;/div&gt;&lt;!-- end video-main --&gt;</div><div class="line">&lt;div class=&quot;video-sub&quot;&gt;</div><div class="line">&lt;h2&gt;NewsCloud&apos;s Community Starter&lt;/h2&gt;</div><div class="line"> &lt;p&gt;Community Starter is a simple, affordable platform to launch social media communities and extend existing websites. It provides a suite of Facebook-connected interactive features that can help you host a vibrant online community for your neighborhood, topic, community group, nonprofit, membership association or city.&lt;/p&gt;</div><div class="line">&lt;a href=&quot;/how-community-foundations-can-build-engaged-local-communities-with-newscloud.html&quot; class=&quot;ka_button small_button small_tealgrey&quot;&gt;&lt;span&gt;Start your community →&lt;/span&gt;&lt;/a&gt;&lt;br class=&quot;clear&quot; /&gt;</div><div class="line">&lt;/div&gt;&lt;!-- end video-sub --&gt;</div><div class="line">&lt;/div&gt;&lt;!-- end video-wrap --&gt;</div><div class="line">&lt;!-- ***************** - END Video - ***************** --&gt;</div></pre></td></tr></table></figure>
<p>问题解决：</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/video%20restored.jpg" alt="Lets Encrypt Vimeo Working with HTTPS"></p>
<h2 id="在结束前"><a href="#在结束前" class="headerlink" title="在结束前"></a>在结束前</h2><p>我对社区的目标印象非常深刻，Let’s Encrypt 提供了质量和便利性。无处不在的网络出版商将从简单免费的 SSL 中获益，感谢 EFF、Mozilla 以及 Let’s Encrypt！</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/install%20-%20donate.jpg" alt="Lets Encrypt Donate "></p>
<p>您可以捐赠 Let’s Encrypt 或者 EFF 来支持这项工作：</p>
<ul>
<li><p><a href="https://letsencrypt.org/donate" target="_blank" rel="external">直接捐赠 Let’s Encrypt</a></p>
</li>
<li><p><a href="https://eff.org/donate-le" target="_blank" rel="external">捐赠 EFF</a></p>
</li>
</ul>
<p>你可以 <a href="https://letsencrypt.org/howitworks/" target="_blank" rel="external">了解更多关于他们软件的技术细节</a>。Let’s Encrypt 也有一个良好的 <a href="https://community.letsencrypt.org/" target="_blank" rel="external">社区论坛</a>:</p>
<p><img src="https://cms-assets.tutsplus.com/uploads/users/317/posts/22303/image/community%20forum.jpg" alt="Lets Encrypt Community Forum"></p>
<h3 id="下一步？"><a href="#下一步？" class="headerlink" title="下一步？"></a>下一步？</h3><p>Let’s Encrypt 正在积极努力地完成其首次公开发行：</p>
<blockquote>
<p>我们还有很多工作要做在我们完全丢弃测试标签之前，特别是在客户端的体验上。自动化是我们策略的基础。我们需要确保广泛的客户端平台平稳可靠运行。</p>
</blockquote>
<p>要跟随最新的代码，只要偶尔跟新你的 git 树：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt/letsencrypt</div><div class="line">sudo git pull</div></pre></td></tr></table></figure>
<p>我私人的 WordPress 目前运行的是 Varnish 3.x。这与 Let’s Encrypt 并不能立即使用，我可能会花一些时间跟踪解决。</p>
<p>与此同时,如果你正在寻找其他的实用工具来帮助你建立不断增长的 WordPress 代码集或者变得更精通WordPress，别忘了看 <a href="http://themeforest.net/category/wordpress" target="_blank" rel="external">we have available in Envato Market</a>.</p>
<p>如果你有问题，请请发表在下面。或者你可以 <a href="https://twitter.com/intent/user?screen_name=reifman" target="_blank" rel="external">contact me on Twitter @reifman</a>。请访问 <a href="http://tutsplus.com/authors/jeff-reifman" target="_blank" rel="external">my Envato Tuts+ instructor page</a> 来查看我写的其他教程。例如 <a href="http://code.tutsplus.com/tutorials/clone-wordpress-in-linux--cms-25059" target="_blank" rel="external">Cloning WordPress in Linux (in 90 seconds)</a>.</p>
<h2 id="译者说"><a href="#译者说" class="headerlink" title="译者说"></a>译者说</h2><p>由于水平受限，文中有不恰当之处，还请读者谅解并在评论中指出，以便改正！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;随着 HTTP2.0 的发展，HTTPS 也变得流行起来，本来想为我的这个博客添加 HTTPS ，但是受限于服务器的原因，不能安装 SSL 证书。这篇文章算是为以后启用 HTTPS 吹响号角吧！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="译文" scheme="http://coderfe.cn/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="HTTPS" scheme="http://coderfe.cn/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>IE8 兼容性总结</title>
    <link href="http://coderfe.cn/2016/08/08/IE8-compatibility/"/>
    <id>http://coderfe.cn/2016/08/08/IE8-compatibility/</id>
    <published>2016-08-08T19:55:52.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这几周经历了一个项目，要兼容到 IE8 浏览器，在开发过程中踩了不少的坑，尤其是 flexbox 布局，Chrome 和 Firefox 完全兼容，但是 IE8 就没那么轻松了。既然坑踩了，那么就总结下来这些 IE8 常见的兼容性问题，以免以后再踩到以一毛一样的坑（应该不会了，IE8 的寿命也许不长了吧）！</p>
</blockquote>
<a id="more"></a>
<h2 id="rgba-颜色格式"><a href="#rgba-颜色格式" class="headerlink" title="rgba 颜色格式"></a>rgba 颜色格式</h2><ul>
<li>IE8 不支持 <code>rgba(0, 0, 0, .5)</code> 这种颜色格式。</li>
<li>解决方案：可以利用一张半透明的 <strong>png</strong> 图片来兼容 IE8。</li>
</ul>
<h2 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a>flexbox</h2><ul>
<li>根据 <a href="caniuse.com">caniuse</a> 给出的数据，IE8 是不支持 <code>flex</code> 布局属性的， 甚至 IE11 只支持一部分。</li>
<li>解决方案：利用 <code>display: inline-block</code> / <code>display: table</code> / <code>display: inline</code> 来实现部分兼容。</li>
<li><a href="https://kyusuf.com/post/almost-complete-guide-to-flexbox-without-flexbox" target="_blank" rel="external">Almost complete guide to flexbox (without flexbox)</a>，介绍了一些不用 <code>felx</code> 属性来完成 <code>flexbox</code> 布局的技术，很有参考价值，推荐。</li>
<li><a href="http://www.flexboxpatterns.com/site-header" target="_blank" rel="external">Flexbox Patterns</a>，一些利用 <code>flex</code> 实现常用的布局的例子，推荐参考。</li>
</ul>
<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><ul>
<li>非常遗憾，HTML5 新增的标签在 IE8 里是不受支持滴，例如：<code>section</code> / <code>main</code> / <code>header</code> / <code>footer</code> 等。</li>
<li>解决方案：<a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="external">html5shiv</a>，这个脚本可以实现兼容 IE8 。</li>
</ul>
<h2 id="media-query"><a href="#media-query" class="headerlink" title="media query"></a>media query</h2><ul>
<li>非常非常遗憾，IE8 也不支持 <code>media query</code> 。</li>
<li>解决方案：<a href="https://github.com/scottjehl/Respond" target="_blank" rel="external">Respond.js</a></li>
</ul>
<h2 id="CSS3-新特性"><a href="#CSS3-新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h2><ul>
<li>IE8 支持的 CSS3 新特性仅有 20% ，具体可以查看 <a href="http://caniuse.com/#search=css3" target="_blank" rel="external">caniuse</a> 。</li>
<li>解决方案：<a href="https://github.com/lojjic/PIE" target="_blank" rel="external">css3pie</a>，目前 css3pie 可以支持的功能有：<ul>
<li>border-radius</li>
<li>box-shadow</li>
<li>border-image</li>
<li>multiple background images</li>
<li>linear-gradient as background image</li>
</ul>
</li>
</ul>
<h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><p>以上就是我在实践项目中遇到的 IE8 兼容性问题以及我自己的解决方案。如果你有更好的解决方案或者 IE8 兼容性问题，欢迎讨论：<a href="https://www.gitbook.com/book/coderfe/notes/discussions" target="_blank" rel="external">https://www.gitbook.com/book/coderfe/notes/discussions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这几周经历了一个项目，要兼容到 IE8 浏览器，在开发过程中踩了不少的坑，尤其是 flexbox 布局，Chrome 和 Firefox 完全兼容，但是 IE8 就没那么轻松了。既然坑踩了，那么就总结下来这些 IE8 常见的兼容性问题，以免以后再踩到以一毛一样的坑（应该不会了，IE8 的寿命也许不长了吧）！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="IE" scheme="http://coderfe.cn/tags/IE/"/>
    
      <category term="CSS" scheme="http://coderfe.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 渐变的角度问题</title>
    <link href="http://coderfe.cn/2016/07/28/css-gradient-angles/"/>
    <id>http://coderfe.cn/2016/07/28/css-gradient-angles/</id>
    <published>2016-07-28T20:05:15.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天在看《CSS揭秘》这本书的时候，作者用渐变做出了一个切角的效果（把矩形的四个角切掉），她使用 background 属性来制作了这个效果，不得不惊叹作者对于 CSS 的高超运用。但是在我动手做的过程中发现，在 CSS 中渐变的角度似乎和我们平常理解的角度有些许差别，为此查阅了一些资料，果然有出入，所以在此分享一下！</p>
</blockquote>
<a id="more"></a>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="http://oaz5uxplb.bkt.clouddn.com/coderfee-css-gradient-corner.PNG" alt="corner-shape"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.corner</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#58a</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(45deg, transparent 15px, #58a 0) bottom left,</div><div class="line">              <span class="built_in">linear-gradient</span>(135deg, transparent 15px, #58a 0) top left,</div><div class="line">              <span class="built_in">linear-gradient</span>(-45deg, transparent 15px, #58a 0) bottom right,</div><div class="line">              <span class="built_in">linear-gradient</span>(-135deg, transparent 15px, #58a 0) top right;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="角度问题"><a href="#角度问题" class="headerlink" title="角度问题"></a>角度问题</h3><p><strong>平常我们理解的角度应该是下面这样的：</strong></p>
<p><img src="http://oaz5uxplb.bkt.clouddn.com/coderfee-normal-angles.png" alt="normal-angles"></p>
<p>X轴的正轴是0°，顺时针旋转为负角，逆时针旋转为正角。</p>
<p><strong>CSS 中的角度：</strong></p>
<p><img src="http://oaz5uxplb.bkt.clouddn.com/coderfee-css-angles.png" alt="css-angles"></p>
<p>Y轴的正轴是0°，顺时针旋转为正角，逆时针旋转为负角，箭头所指的方向即使渐变的方向，在 CSS 中默认的渐变角度是自上而下的。</p>
<p>如果按照平常我们理解角的思维来做这个切角的效果的话，肯定免不了折腾，甚至做不出来这个效果。其实对比一下两幅图也就明白了 CSS 渐变角度，那么这个效果就可以自然而然地做出来了。</p>
<h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><p>兼容主流浏览器：Edge + Chrome + Firefox + IE10+</p>
<h3 id="代码的可维护性"><a href="#代码的可维护性" class="headerlink" title="代码的可维护性"></a>代码的可维护性</h3><p>在作者看来上面实现的代码是不够 <strong>DRY</strong> 的，因此要使代码更加容易维护和重用，那对于原生 CSS 来说就有点强人所难了，所以预处理器登场了，例如 SCSS ，可以将上面的代码写成 Mixin ，以便维护和重用，如下：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> corner-shape(<span class="variable">$bg</span>, <span class="variable">$tr</span>:<span class="number">0</span>) &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="variable">$bg</span>;</div><div class="line">  <span class="attribute">background</span>: linear-gradient(<span class="number">45deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>) bottom left,</div><div class="line">              linear-gradient(<span class="number">135deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>) top left,</div><div class="line">              linear-gradient(-<span class="number">45deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>) bottom right,</div><div class="line">              linear-gradient(-<span class="number">135deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>) top right;</div><div class="line">  <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">  <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.corner</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  @<span class="keyword">include</span> corner-shape(<span class="number">#58a</span>, 15px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过编译之后就可以生成和文章开头一模一样的代码了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天在看《CSS揭秘》这本书的时候，作者用渐变做出了一个切角的效果（把矩形的四个角切掉），她使用 background 属性来制作了这个效果，不得不惊叹作者对于 CSS 的高超运用。但是在我动手做的过程中发现，在 CSS 中渐变的角度似乎和我们平常理解的角度有些许差别，为此查阅了一些资料，果然有出入，所以在此分享一下！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://coderfe.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 中有趣的 filter 属性</title>
    <link href="http://coderfe.cn/2016/07/25/css-filter/"/>
    <id>http://coderfe.cn/2016/07/25/css-filter/</id>
    <published>2016-07-25T19:55:33.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>昨天在 <a href="https://www.sitepoint.com/css-filter-effects-blur-grayscale-brightness-and-more-in-css/" target="_blank" rel="external">sitepoint</a> 看到一篇文章，是关于 CSS 的 <code>filter</code> 属性的，但在这之前我只知道 <code>filter: opacity(30%)</code> ，然而我是不知道 filter 还有诸如 <code>brightness</code> / <code>constrast</code> / <code>heu-rotate</code> / <code>spie</code> 等等这些，CSS 果然博大精深！</p>
</blockquote>
<a id="more"></a>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">el</span> &#123;</div><div class="line">  <span class="attribute">filter</span>: none | filter-function | filter-function;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p></p><p data-height="734" data-theme-id="light" data-slug-hash="oLdyEV" data-default-tab="result" data-user="coderfee" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/coderfee/pen/oLdyEV/" target="_blank" rel="external">oLdyEV</a> by Simon (<a href="http://codepen.io/coderfee" target="_blank" rel="external">@coderfee</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>上面的效果依次是：</p>
<ul>
<li>第一张为原图</li>
<li>亮度 <code>brightness(60%)</code></li>
<li>对比度 <code>constrast(150%)</code></li>
<li>灰度 <code>grayscale(100%)</code></li>
<li>饱和度 <code>saturation(180%)</code></li>
<li>棕褐色 <code>sepia(100%)</code></li>
<li>色相旋转 <code>hue-rotate(90deg)</code></li>
<li>色相旋转 <code>hue-rotate(180deg)</code></li>
<li>色相旋转 <code>hue-rotate(270deg)</code></li>
<li>反色 <code>invert(100%)</code></li>
<li>模糊 <code>blur(1px)</code></li>
<li>透明度 <code>opacity(65%)</code></li>
<li>阴影 <code>drop-shadow(5px 5px 10px #666)</code></li>
</ul>
<p>这些“滤镜”可以叠加使用。有时可能需要用一张图片做成不同效果，这时 <code>filter</code> 属性就可以派上用场，省去了P图的时间。</p>
<h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><table>
<thead>
<tr>
<th>filter</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>blur</td>
<td>0</td>
<td>不接受百分比，数值越大越模糊</td>
</tr>
<tr>
<td>brightness</td>
<td>1</td>
<td>数值超过100%，图像更亮</td>
</tr>
<tr>
<td>contrast</td>
<td>1</td>
<td>数值超过100%，对比度更低</td>
</tr>
<tr>
<td>drop-shadow</td>
<td></td>
<td></td>
</tr>
<tr>
<td>grayscale</td>
<td>0</td>
<td>值为100%时为灰度图像，0% - 100%</td>
</tr>
<tr>
<td>hue-rotate</td>
<td>0deg</td>
<td>无最大值</td>
</tr>
<tr>
<td>invert</td>
<td>0</td>
<td>100%完全反转，0% - 100%</td>
</tr>
<tr>
<td>opacity</td>
<td>1</td>
<td>0%完全透明，0% - 100%</td>
</tr>
<tr>
<td>saturate</td>
<td>1</td>
<td>0%完全不饱和，超过100%饱和度</td>
</tr>
<tr>
<td>sepia</td>
<td>0</td>
<td>100%为完全深褐色，0% - 100%</td>
</tr>
</tbody>
</table>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.sitepoint.com/css-filter-effects-blur-grayscale-brightness-and-more-in-css/" target="_blank" rel="external">CSS Filter Effects: Blur, Grayscale, Brightness and More in CSS!</a></p>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><blockquote>
<p>2016-07-27 更改错别字<br>2016-08-08 增加详细说明</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;昨天在 &lt;a href=&quot;https://www.sitepoint.com/css-filter-effects-blur-grayscale-brightness-and-more-in-css/&quot;&gt;sitepoint&lt;/a&gt; 看到一篇文章，是关于 CSS 的 &lt;code&gt;filter&lt;/code&gt; 属性的，但在这之前我只知道 &lt;code&gt;filter: opacity(30%)&lt;/code&gt; ，然而我是不知道 filter 还有诸如 &lt;code&gt;brightness&lt;/code&gt; / &lt;code&gt;constrast&lt;/code&gt; / &lt;code&gt;heu-rotate&lt;/code&gt; / &lt;code&gt;spie&lt;/code&gt; 等等这些，CSS 果然博大精深！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://coderfe.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Gulp and Browser-sync</title>
    <link href="http://coderfe.cn/2016/07/20/browser-sync/"/>
    <id>http://coderfe.cn/2016/07/20/browser-sync/</id>
    <published>2016-07-20T21:39:25.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用 <code>gulp</code> 和 <code>browser-sync</code> 做开发也已经有一段时间了，他们俩配合着用的话，简直就是提高开发效率的神器。但搞笑的是我今天才发现利用 <code>browser-sync</code> 可以同时在 PC 和 移动端预览效果，我承认我发现的有点晚😅。。。</p>
</blockquote>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g browser-sync gulp</div></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>可以和 <code>gulp</code> 搭配使用，也可以单独使用，通常我都是搭配 <code>gulp</code> 使用的，但在这里仅作演示。通过以下命令可以启动一个小型的服务器，并监听文件变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># *号代表要监听的文件，可以使任何文件</div><div class="line">browser-sync start --server --file &quot;*&quot;</div></pre></td></tr></table></figure>
<p>此时，会在默认浏览器中打开一个窗口并自动访问 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> ，同时呢，命令行会显示一下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[BS] Access URLs:</div><div class="line"> --------------------------------------</div><div class="line">       Local: http://localhost:3000</div><div class="line">    External: http://192.168.1.103:3000</div><div class="line"> --------------------------------------</div><div class="line">          UI: http://localhost:3001</div><div class="line"> UI External: http://192.168.1.103:3001</div><div class="line"> --------------------------------------</div><div class="line">[BS] Serving files from: ./</div></pre></td></tr></table></figure>
<p><strong>用你的移动设备打开 <a href="http://192.168.1.103:3000" target="_blank" rel="external">http://192.168.1.103:3000</a> ，你会看见网页会呈现在你面前，而且设备间可以同步进行滚动等操作，调试响应式网站简直不要太好用😎</strong></p>
<p><strong><a href="http://localhost:3001" target="_blank" rel="external">http://localhost:3001</a> 这个地址是一个可视化操作的界面，可以在这个网页中配置 <code>browser-sync</code> 的相关服务，很神奇，有木有？</strong></p>
<h3 id="gulp-amp-browser-sync"><a href="#gulp-amp-browser-sync" class="headerlink" title="gulp &amp; browser-sync"></a>gulp &amp; browser-sync</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp browser-sync --save-dev</div></pre></td></tr></table></figure>
<p><strong>gulpfile.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">truebrowserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</div><div class="line"></div><div class="line">gulp.task(<span class="string">'server'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        server: &#123;</div><div class="line">            baseDir: <span class="string">"./"</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后在命令行中运行 <code>gulp server</code></p>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>其实利用 <code>gulp</code> 可以做的事情很多很多，编译 <code>SCSS</code> 、压缩代码/图片等等。前端自动化的任务交给它就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 &lt;code&gt;gulp&lt;/code&gt; 和 &lt;code&gt;browser-sync&lt;/code&gt; 做开发也已经有一段时间了，他们俩配合着用的话，简直就是提高开发效率的神器。但搞笑的是我今天才发现利用 &lt;code&gt;browser-sync&lt;/code&gt; 可以同时在 PC 和 移动端预览效果，我承认我发现的有点晚😅。。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://coderfe.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="gulp" scheme="http://coderfe.cn/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>工作的第一周</title>
    <link href="http://coderfe.cn/2016/07/18/job-weekly-1/"/>
    <id>http://coderfe.cn/2016/07/18/job-weekly-1/</id>
    <published>2016-07-18T19:20:54.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>毕业了差不多一个月了，终于找到了一份说的过去的工作，虽然跟自己想象中的工作还有那么一丢丢差距，但起码也能继续做自己喜欢的事情了。</p>
</blockquote>
<a id="more"></a>
<p>毕业，踏入社会，这是一个艰难的过程。投过很多的简历，但是得到的面试也不怎么多，毕竟自己的技术是差点。从大三开始接触前端，一直到现在，虽然接触了很多的技术和理念，但在实践方面的经验很少，我想这也是那些企业拒绝我的原因。</p>
<p>6月份毕业之后，拿着如此简陋的简历开始找工作了，虽然会碰壁，但面试官也会教会了我如何继续学习前端，走自己喜欢的路，做自己喜欢的事。</p>
<p>找到如今这份工作的说来还要感谢我姐。</p>
<p>7月11号正式入职，但是分配到项目是在7月15号啊，这中间几天都不知道自己要干嘛，还好终于分到了项目组，开始自己的正式前端之旅。可是闹心的是项目要兼容到 IE8 ，我要哭了😭，耐心点，慢慢来。</p>
<p>周六培训，周日休息！</p>
<p>还有我最不喜欢的事——挤地铁！</p>
<p>前端路上的旅行，继续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;毕业了差不多一个月了，终于找到了一份说的过去的工作，虽然跟自己想象中的工作还有那么一丢丢差距，但起码也能继续做自己喜欢的事情了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="工作" scheme="http://coderfe.cn/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="Weekly" scheme="http://coderfe.cn/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>面试——灰机wiki</title>
    <link href="http://coderfe.cn/2016/07/08/interview-07-07/"/>
    <id>http://coderfe.cn/2016/07/08/interview-07-07/</id>
    <published>2016-07-08T13:15:39.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>7月份毕业之后一直在找一份前端方面的工作，昨天终于得到了一次面试的机会。昨天去面试，面试官给了我三道题目，太紧张了，磕磕绊绊的答了一下，不太满意，今天总结一下昨天的几道面试题。</p>
</blockquote>
<a id="more"></a>
<ol>
<li><p>文本内容溢出后用省略号代替显示：</p>
<p>这个可以直接用 <code>text-overflow</code> 来完成，当时竟然没有记起来这个属性。。。兼容 IE / FF / Chrome</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.text &#123;</div><div class="line">  width：100px;</div><div class="line">  height: 30px;</div><div class="line">  overflow: hidden;</div><div class="line">  white-space: nowrap;</div><div class="line">  tetx-overflow: ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>三列布局，左右两列不定宽，中间自适应：</p>
<p>这道题我的思路是用 <code>flexbox</code> 实现，其实实现的方法也很多，可以使用 浮动 / 绝对定位等</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>,</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-color</span>: darkkhaki;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-color</span>: cadetblue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>鼠标滑过用户头像时出现一张卡片，鼠标移出头像时卡消失，同时鼠标在卡片上时卡片保持显示状态：</p>
<p>这个题目的基本思路就是给卡片加上状态，再判断鼠标的移入移出事件。</p>
</li>
</ol>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><blockquote>
<p>2016-07-27 补充第三题的思路</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;7月份毕业之后一直在找一份前端方面的工作，昨天终于得到了一次面试的机会。昨天去面试，面试官给了我三道题目，太紧张了，磕磕绊绊的答了一下，不太满意，今天总结一下昨天的几道面试题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://coderfe.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>发布npm包</title>
    <link href="http://coderfe.cn/2016/05/24/npm-package/"/>
    <id>http://coderfe.cn/2016/05/24/npm-package/</id>
    <published>2016-05-24T22:06:14.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>npm是由nodejs提供的一个包管理工具，npm可以获取第三方nodejs工具，比如gulp-sass, gulp-autoprefixer等可以大大提高开发效率。Let’s learn it!</p>
</blockquote>
<a id="more"></a>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p><code>package.json</code>文件里包含了包的名称、版本、依赖、开源协议等重要信息。不确定的信息可以直接回车，之后再修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line"># 或者</div><div class="line">npm init --yes</div></pre></td></tr></table></figure></p>
<p>生成的package.json如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;example&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;example npm package&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;coderfee&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="注册npm账号"><a href="#注册npm账号" class="headerlink" title="注册npm账号"></a>注册npm账号</h2><p>在 <a href="https://www.npmjs.org/" target="_blank" rel="external">https://www.npmjs.org/</a> 注册用户，然后使用命令行登录，会要求输入账户名、密码、邮箱，正确输入即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm login</div><div class="line">Username: your name</div><div class="line">Password: your password</div><div class="line">Email: your email</div></pre></td></tr></table></figure></p>
<h2 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm publish</div><div class="line"># 或者</div><div class="line">npm publish path/to/package</div></pre></td></tr></table></figure>
<h2 id="更新npm包"><a href="#更新npm包" class="headerlink" title="更新npm包"></a>更新npm包</h2><p>更新时修改版本后再发布即可，版本格式：主版号.次版号.修订号</p>
<p>版本号修改规则：</p>
<ul>
<li>主版号：当你做了不相容的 API 修改。</li>
<li>次版号：当你做了向下相容的功能性新增。</li>
<li>修订号：当你做了向下相容的问题修正。</li>
</ul>
<h2 id="撤销发布的包"><a href="#撤销发布的包" class="headerlink" title="撤销发布的包"></a>撤销发布的包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm unpublish package-name@package-version</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.npmjs.com/getting-started/what-is-npm" target="_blank" rel="external">npm doc</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;npm是由nodejs提供的一个包管理工具，npm可以获取第三方nodejs工具，比如gulp-sass, gulp-autoprefixer等可以大大提高开发效率。Let’s learn it!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://coderfe.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>优化博客性能</title>
    <link href="http://coderfe.cn/2016/05/07/performance-optimization/"/>
    <id>http://coderfe.cn/2016/05/07/performance-optimization/</id>
    <published>2016-05-07T20:08:30.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今天发现博客首页的加载速度比较感人，于是就用 Google 出品的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">Pagespeed Insights</a> 检测了一下，发现了不少问题，而且这些问题都严重拖慢了加载时间。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>HTML / CSS / JS / Photos 都是未压缩状态</li>
<li>部分静态资源没有设置缓存</li>
<li>CSS 出现阻塞，即首页出现空白的情况</li>
</ul>
<p>暂时只解决了第一个问题：</p>
<ul>
<li>修改一下 <code>Travis CI</code> 的部署脚本 <code>.travis.yml</code> 即可实现自动压缩（利用 <code>gulpjs</code>）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">install:</div><div class="line">- npm install hexo-cli gulp -g</div><div class="line">- npm install</div><div class="line"></div><div class="line">script:</div><div class="line">- hexo clean</div><div class="line">- hexo g</div><div class="line">- gulp</div><div class="line">- hexo d</div></pre></td></tr></table></figure>
</li>
</ul>
<p>查看 <a href="https://github.com/coderfe/blog/blob/master/gulpfile.js" target="_blank" rel="external"><code>gulpfile.js</code></a> 配置</p>
<ul>
<li>优化之后，加载速度明显提升了。剩下的几个问题还得研究一下</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天发现博客首页的加载速度比较感人，于是就用 Google 出品的 &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;Pagespeed Insights&lt;/a&gt; 检测了一下，发现了不少问题，而且这些问题都严重拖慢了加载时间。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="gulp" scheme="http://coderfe.cn/tags/gulp/"/>
    
      <category term="性能优化" scheme="http://coderfe.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="Travis CI" scheme="http://coderfe.cn/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>为Atom编辑器安装本地插件</title>
    <link href="http://coderfe.cn/2016/05/02/install-local-atom-packages/"/>
    <id>http://coderfe.cn/2016/05/02/install-local-atom-packages/</id>
    <published>2016-05-02T16:03:55.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Atom是一款优秀的编辑器，但是国内的网络环境太让人尴尬了，安装个插件都困难。这几天逛论坛时发现，可以把Github上的插件clone到本地再安装，做一下记录，免得又忘记了。</p>
</blockquote>
<a id="more"></a>
<p><strong>Atom插件的位置</strong><br>Windows是在<code>C:\Users\yourname\.atom\packages</code>目录<br>Linux是在<code>~\.atom\packages</code>目录下</p>
<ol>
<li>首先在<a href="https://atom.io/packages" target="_blank" rel="external">这里</a>找到想要的插件，然后点击Repo链接到作者的Github</li>
<li><p>把这个Repo clone到Atom插件所在的目录，以<code>git-plus</code>为例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/akonwi/git-plus.git</div><div class="line">$ <span class="built_in">cd</span> git-plus</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
</li>
<li><p>重启之后就可以使用了</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Atom是一款优秀的编辑器，但是国内的网络环境太让人尴尬了，安装个插件都困难。这几天逛论坛时发现，可以把Github上的插件clone到本地再安装，做一下记录，免得又忘记了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="atom" scheme="http://coderfe.cn/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>利用TravisCI自动部署Hexo blog</title>
    <link href="http://coderfe.cn/2016/04/25/travisCI-deploy-hexo-blog/"/>
    <id>http://coderfe.cn/2016/04/25/travisCI-deploy-hexo-blog/</id>
    <published>2016-04-25T15:11:14.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Travis CI</strong>是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。—— <a href="https://zh.wikipedia.org/wiki/Travis_CI" target="_blank" rel="external">Wiki</a></p>
</blockquote>
<a id="more"></a>
<p>前几天的<a href="http://coderfe.cn/2016/04/07/hexo-github-blog/">一篇文章</a>介绍了搭建自己的Hexo博客，可是，今天遇到了一个问题：我要在另一台电脑上写博客文章，但是博客的源代码却不在身边，而且我也没有备份。于是就有一下几个解决方案：</p>
<ul>
<li>拷贝到U盘随身携带。但是，相信我，总有一天你会忘记的</li>
<li>备份在云端，比如DropBox或者其他云盘。缺点：太麻烦，每次更新都要手动上传</li>
<li>放在Github上。恩，这似乎是个不错的办法。但是这个方法每次既要更新博客，还要push到Github上</li>
</ul>
<h2 id="Travis-CI解决方案"><a href="#Travis-CI解决方案" class="headerlink" title="Travis CI解决方案"></a>Travis CI解决方案</h2><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><ul>
<li>这些步骤都是Linux中完成的，其他平台的步骤大同小异</li>
<li>以我的博客为例，blog是源码项目(目录)，coderfe.github.io是部署后的博客项目</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>安装Travis Ci命令行工具</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem install travis</div></pre></td></tr></table></figure>
</li>
<li><p>生成 SSH key,并且把id_rsa.pub添加为coderfe.github.io项目的Deploy key，注意要勾选<code>Allow write access</code>,因为Travis CI要对这个仓库拥有写入权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment"># 生成的ssh key一般在`~/home/.ssh`目录下</span></div></pre></td></tr></table></figure>
</li>
<li><p>在本地的blog项目中新建<code>.travis</code>文件夹，最后它的结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.travis</div><div class="line">|__id_rsa.enc</div><div class="line">|__ssh_config</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h3><ul>
<li>把整个Hexo项目push到Github上，这个就是博客的源代码</li>
<li>前往<a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI官网</a>用GitHub账号的登陆，并把自己的项目同步到Travis CI，然后把<code>coderfe/blog</code>的开关打开</li>
<li><p>安装Travis CI命令行并用GitHub账号登录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装</span></div><div class="line">$ gem install travis</div><div class="line"><span class="comment"># 登录</span></div><div class="line">$ travis login --auto</div></pre></td></tr></table></figure>
</li>
<li><p>加密<code>id_rsa</code>私钥（不能暴露在公开仓库中）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 把id_rsa复制到当前目录.travis/</span></div><div class="line">$ cp ~/.ssh/.id_rsa .</div><div class="line"><span class="comment"># 加密之前必须新建.travis.yml文件，否则会报错</span></div><div class="line">$ touch .travis.yml</div><div class="line"><span class="comment"># 加密</span></div><div class="line">$ travis encrypt-file ssh_key --add</div><div class="line"><span class="comment"># 删除id_rsa</span></div><div class="line">$ rm id_rsa</div></pre></td></tr></table></figure>
</li>
</ul>
<p>以上代码执行完成功后在<code>.travis.yml</code>文件中有一串字母和数字，这是用来解密的，每个人都不一样，先不要动，而且会生成了<code>id_rsa.enc</code>文件，把<code>.travis.yml</code>移动到<code>blog</code>根目录</p>
<ul>
<li><p>再在<code>.travis</code>下新建<code>ssh_config</code>文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Host github.com</div><div class="line">  User git</div><div class="line">  StrictHostKeyChecking no</div><div class="line">  IdentityFile ~/.ssh/id_rsa</div><div class="line">  IdentitiesOnly yes</div></pre></td></tr></table></figure>
</li>
<li><p>配置<code>.travis.yml</code>文件，我的配置如下：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="attr">branches:</span></div><div class="line"><span class="attr">  only:</span></div><div class="line"><span class="bullet">  -</span> master</div><div class="line"></div><div class="line"><span class="attr">language:</span> node_js</div><div class="line"></div><div class="line"><span class="attr">sudo:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="attr">node_js:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'stable'</span></div><div class="line"></div><div class="line"><span class="attr">before_install:</span></div><div class="line"><span class="bullet">-</span> openssl aes<span class="bullet">-256</span>-cbc -K $encrypted_d2cb722f4635_key -iv $encrypted_d2cb722f4635_iv</div><div class="line"><span class="bullet">  -</span>in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div><div class="line"><span class="bullet">-</span> chmod <span class="number">600</span> ~/.ssh/id_rsa</div><div class="line"><span class="bullet">-</span> eval $(ssh-agent)</div><div class="line"><span class="bullet">-</span> ssh-add ~/.ssh/id_rsa</div><div class="line"><span class="bullet">-</span> cp .travis/ssh_config ~/.ssh/config</div><div class="line"><span class="bullet">-</span> git config --global user.name <span class="string">"coderfe"</span></div><div class="line"><span class="bullet">-</span> git config --global user.email coderfee@outlook.com</div><div class="line"><span class="bullet">-</span> git clone -b master git@github.com:coderfe/coderfe.github.io.git .deploy_git</div><div class="line"></div><div class="line"><span class="attr">install:</span></div><div class="line"><span class="bullet">-</span> npm install hexo-cli -g</div><div class="line"><span class="bullet">-</span> npm install</div><div class="line"></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">-</span> hexo clean</div><div class="line"><span class="bullet">-</span> hexo g</div><div class="line"><span class="bullet">-</span> hexo d</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><ul>
<li><code>Deploy key</code>权限问题，记得勾选<code>Allow write access</code></li>
<li>加密私钥<code>id_rsa</code>，私钥不能暴露在公开仓库，否则其他人也会拥有你仓库的读写权限</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>利用Travis CI持续集成服务，再也不必去手动备份了，只需要一次push就可实现博客的更新和备份，大大提高了效率啊，有木有！这种自动化的工具真的是多多益善。当然像Nodejs这样的项目都在用这项服务，说明自动部署Hexo Blog只是其功能中很小的一部分，继续学习！</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="external">用 Travis CI 自動部署網站到 GitHub</a><br><a href="https://docs.travis-ci.com/" target="_blank" rel="external">Travis CI官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Travis CI&lt;/strong&gt;是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。—— &lt;a href=&quot;https://zh.wikipedia.org/wiki/Travis_CI&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://coderfe.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="blog" scheme="http://coderfe.cn/tags/blog/"/>
    
      <category term="Travis CI" scheme="http://coderfe.cn/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>Stylish —— 优雅地刷网页</title>
    <link href="http://coderfe.cn/2016/04/23/restyle-website-with-stylish/"/>
    <id>http://coderfe.cn/2016/04/23/restyle-website-with-stylish/</id>
    <published>2016-04-23T22:28:51.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在PC端<strong>QQ空间</strong>看朋友动态、<strong>刷微博</strong>的时候你是否觉得有些东西太碍眼、太复杂了，对，我就是这样觉的，所以呢，下面就让<strong>Stylish</strong>还给你一个清爽优雅的界面。</p>
</blockquote>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><a href="http://coderfe.cn/2016/04/21/high-quality-apps-windows-ios-android/">Chrome浏览器</a></li>
<li>安装<a href="https://chrome.google.com/webstore/detail/fjnbnpbmkenffdnngjfgmeleoegfcffe" target="_blank" rel="external">Styleish插件</a></li>
<li>一丢丢<code>CSS</code>基础</li>
</ul>
<h2 id="QQ空间优化"><a href="#QQ空间优化" class="headerlink" title="QQ空间优化"></a>QQ空间优化</h2><ul>
<li>打开你的<a href="http://qzone.qq.com/" target="_blank" rel="external">QQ空间</a>，点击<strong>右上角那个S字母的图标</strong>，选择<strong>编写样式给这个URL</strong></li>
<li>第一步完成会打开一个写代码的窗口，复制<a href="https://github.com/coderfe/cssstyles/blob/master/qzone-redesign.css" target="_blank" rel="external">我的样式</a>到那个框框里，输入名称，保存</li>
<li>优雅地刷好友动态</li>
</ul>
<p><img src="http://oaz5uxplb.bkt.clouddn.com/coderfee-qzone-restyle.gif" alt="qzone-restyle"></p>
<h2 id="微博的优化"><a href="#微博的优化" class="headerlink" title="微博的优化"></a>微博的优化</h2><ul>
<li>有现成的微博样式供你选择<a href="https://userstyles.org/styles/106272/weibo-v6" target="_blank" rel="external">weibo_v6</a>和<a href="https://userstyles.org/styles/123737/weibo-v6-patch" target="_blank" rel="external">weibo_v6_patch</a></li>
<li>打开<a href="http://www.weibo.com" target="_blank" rel="external">微博</a>，点击按钮，编写样式</li>
<li>复制<a href="https://github.com/coderfe/cssstyles/blob/master/weibo-redesign.css" target="_blank" rel="external">我的样式</a>，粘贴</li>
<li>优雅的刷微博</li>
</ul>
<p><img src="http://oaz5uxplb.bkt.clouddn.com/coderfee-weibo-restyle.gif" alt="weibo-restyle"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果你有兴趣可以再添加其他样式，并且Stylish可以实现的远不止这些，等待你的发掘！<br>其次，微博的样式是在前两个样式的基础上加了一些背景图片和动画效果，感谢原作者的创作！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在PC端&lt;strong&gt;QQ空间&lt;/strong&gt;看朋友动态、&lt;strong&gt;刷微博&lt;/strong&gt;的时候你是否觉得有些东西太碍眼、太复杂了，对，我就是这样觉的，所以呢，下面就让&lt;strong&gt;Stylish&lt;/strong&gt;还给你一个清爽优雅的界面。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://coderfe.cn/tags/CSS/"/>
    
      <category term="美化" scheme="http://coderfe.cn/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一些优质Apps</title>
    <link href="http://coderfe.cn/2016/04/21/some-apps/"/>
    <id>http://coderfe.cn/2016/04/21/some-apps/</id>
    <published>2016-04-21T14:30:30.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>移动端的Apps数不胜数，所以高质量的Apps经常会被淹没。这些都是通过自己亲身使用，感觉很顺手且颜值也高的应用，推荐给大家喽。</p>
</blockquote>
<a id="more"></a>
<h1 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h1><ul>
<li>浏览器—-<a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank" rel="external">Google Chrome</a>，强大而优雅，安装插件之后更强大更优雅</li>
<li>办公软件—-<a href="https://www.office.com/" target="_blank" rel="external">Office 2016</a>，全家桶（将来一定买正版支持）别提Office 2007，太落后</li>
<li>笔记应用—-<a href="https://www.onenote.com/" target="_blank" rel="external">OneNote</a>，跨平台，免费，同步也不慢，随时随地记笔记</li>
<li>码字专用—-<a href="https://www.typora.io/" target="_blank" rel="external">Typora</a>，界面简洁，功能丰富，完全免费，支持Markdown语法</li>
<li>科学上网—-<a href="https://shadowsocks.com/client.html" target="_blank" rel="external">ShadowSocks</a>，百度一下你就知道，谷歌一下你就知道太多了</li>
<li>音乐播放器—-<a href="http://music.163.com/" target="_blank" rel="external">网易云音乐</a>，忒好，用户体验很棒，跨平台，But部分歌曲有版权限制</li>
<li>云存储—-<a href="https://www.dropbox.com/" target="_blank" rel="external">DropBox</a> or <a href="https://onedrive.live.com/" target="_blank" rel="external">Onedrive</a>，同步快，但是DropBox需翻墙</li>
<li>思维导图—-<a href="http://www.xmind.net/download/" target="_blank" rel="external">XMind</a>，可以借助DropBox同步</li>
<li>解压缩—-<a href="http://www.7-zip.org/" target="_blank" rel="external">7-Zip</a>，速度快，多种格式，免费</li>
<li><a href="http://www.yingdev.com/projects/tickeys" target="_blank" rel="external">Tickeys</a>—-模拟机械键盘的声音，让你沉浸在打字的乐趣当中</li>
<li><a href="http://www.irolan.com/" target="_blank" rel="external">Rolan</a>—-桌面文件夹分类归组</li>
<li><a href="http://rocketdock.com/" target="_blank" rel="external">RocketDock</a>—-Dock应用程序栏，类似Mac电脑上的Dock</li>
<li><a href="https://www.voidtools.com/" target="_blank" rel="external">Everything</a>—-搜索本地文件神器</li>
<li>“你好，小娜”，讲个笑话</li>
</ul>
<h1 id="Android-MEIZU-MX5"><a href="#Android-MEIZU-MX5" class="headerlink" title="Android(MEIZU MX5)"></a>Android(MEIZU MX5)</h1><p>有的应用需要在<strong>Google Play</strong>下载： <!-- more --></p>
<ul>
<li>科学上网—-<a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="external">ShadowSocks影梭</a>，上手简单，稳定</li>
<li>浏览器—-<a href="http://www.opera.com/zh-cn/mobile/operabrowser" target="_blank" rel="external">Opera</a>，省流量，体积小</li>
<li>微博客户端—-<a href="https://play.google.com/store/apps/details?id=us.shandian.blacklight" target="_blank" rel="external">BlackLight</a>，墙外下载，简约不简单</li>
<li>RSS—-<a href="https://play.google.com/store/apps/details?id=it.mvilla.android.quote" target="_blank" rel="external">Quote</a>，干净舒适，体积小</li>
<li>资料管理—-<a href="https://play.google.com/store/apps/details?id=co.refme" target="_blank" rel="external">RefMe</a>，写论文的好帮手</li>
<li>云存储—-<a href="https://play.google.com/store/apps/details?id=com.dropbox.android&amp;hl=zh-cn" target="_blank" rel="external">DropBox</a> / <a href="https://play.google.com/store/apps/details?id=com.microsoft.skydrive&amp;hl=zh-cn" target="_blank" rel="external">Onedrive</a></li>
<li>便签—-<a href="http://www.smartisan.com/apps/notes" target="_blank" rel="external">锤子便签</a>，情怀，好看，体验顺滑</li>
<li>音乐—-<a href="http://music.163.com/#/download" target="_blank" rel="external">网易云音乐</a></li>
<li>写东西—-<a href="https://play.google.com/store/apps/details?id=com.ryeeeeee.markdownx" target="_blank" rel="external">MarkdownX</a>，简洁，可以和DropBox同步</li>
<li>长知识—-<a href="http://www.zhihu.com/app/" target="_blank" rel="external">知乎</a>、<a href="https://play.google.com/store/apps/details?id=com.quora.android" target="_blank" rel="external">Quora</a>、<a href="https://play.google.com/store/apps/details?id=org.wikipedia" target="_blank" rel="external">维基百科</a></li>
<li>看新闻—-<a href="https://play.google.com/store/apps/details?id=jp.gocro.smartnews.android" target="_blank" rel="external">SmartNews</a>，英语新闻客户端</li>
<li>待办事项—-<a href="https://play.google.com/store/apps/details?id=com.accomplish" target="_blank" rel="external">Accomplish</a></li>
<li>连接你的Apps—-<a href="https://play.google.com/store/apps/details?id=com.ifttt.ifttt" target="_blank" rel="external">IF by IFTTT</a>，功能有待进一步发掘</li>
<li>桌面启动器—-<a href="https://play.google.com/store/apps/details?id=com.teslacoilsw.launcher&amp;hl=zh-CN" target="_blank" rel="external">Nova Launcher</a>，体验Google原生桌面风格</li>
</ul>
<h1 id="iOS-iPad-mini-2"><a href="#iOS-iPad-mini-2" class="headerlink" title="iOS(iPad mini 2)"></a>iOS(iPad mini 2)</h1><ul>
<li>科学上网—-<a href="https://itunes.apple.com/us/app/surge-web-developer-tool-proxy/id1040100637?mt=8" target="_blank" rel="external">Surge</a></li>
<li>浏览器—-<strong>Safari</strong></li>
<li>微博客户端—-<a href="https://itunes.apple.com/us/app/vvebo-wei-bo-ke-hu-duan/id670910957?mt=8" target="_blank" rel="external">VVebo</a></li>
<li>写点东西—-<a href="https://itunes.apple.com/cn/app/ulysses/id950335311?mt=8&amp;ign-mpt=uo%3D4" target="_blank" rel="external">Ulysses</a> / <a href="https://itunes.apple.com/cn/app/day-one-2-ri-ji-+-bi-ji/id1044867788?mt=8&amp;ign-mpt=uo%3D4" target="_blank" rel="external">Day One</a></li>
<li>思维导图—-<a href="https://itunes.apple.com/us/app/mindnode-delightful-mind-mapping/id312220102?mt=8" target="_blank" rel="external">MindNode</a> / <a href="https://itunes.apple.com/us/app/ithoughts-mindmap/id866786833?mt=8" target="_blank" rel="external">iThoughts</a></li>
<li>新闻—-<a href="https://itunes.apple.com/us/app/id579581125" target="_blank" rel="external">SmartNews</a></li>
<li>图片—-<a href="https://itunes.apple.com/us/app/typorama-typography-generator/id978659937?mt=8" target="_blank" rel="external">Typorama</a></li>
<li>RSS—-<a href="https://itunes.apple.com/us/app/feedly/id396069556" target="_blank" rel="external">Feedly</a></li>
<li>文件管理—-<a href="https://itunes.apple.com/us/app/documents-5-fast-pdf-reader/id364901807?mt=8" target="_blank" rel="external">Documents</a></li>
<li>云存储—-<a href="https://itunes.apple.com/cn/app/dropbox/id327630330?mt=8" target="_blank" rel="external">DropBox</a> / <a href="https://itunes.apple.com/cn/app/skydrive/id477537958?ls=1&amp;mt=8" target="_blank" rel="external">Onedrive</a></li>
<li>写大纲，理思路—-<a href="https://itunes.apple.com/cn/app/omnioutliner-pro/id404647179?mt=12" target="_blank" rel="external">OmniOutliner</a>，有点小贵:D</li>
</ul>
<h1 id="Linux-Ubuntu"><a href="#Linux-Ubuntu" class="headerlink" title="Linux(Ubuntu)"></a>Linux(Ubuntu)</h1><ul>
<li><a href="https://github.com/getlantern/lantern" target="_blank" rel="external">Lantern</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;移动端的Apps数不胜数，所以高质量的Apps经常会被淹没。这些都是通过自己亲身使用，感觉很顺手且颜值也高的应用，推荐给大家喽。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Apps" scheme="http://coderfe.cn/tags/Apps/"/>
    
  </entry>
  
  <entry>
    <title>Ajax学习笔记</title>
    <link href="http://coderfe.cn/2016/04/08/Ajax-note/"/>
    <id>http://coderfe.cn/2016/04/08/Ajax-note/</id>
    <published>2016-04-08T17:26:39.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Ajax即<strong>Asynchronous Javascript and XML</strong>（异步的Javascript与XML技术），简单来说就是无需刷新整个页面就能更新用户界面，从而更快地响应用户行为的一套技术。</p>
</blockquote>
<a id="more"></a>
<h2 id="Step1—创建实例化对象"><a href="#Step1—创建实例化对象" class="headerlink" title="Step1—创建实例化对象"></a>Step1—创建实例化对象</h2><p>由于各浏览器间的差异，创建实例的方法也不同，下面的代码创建了一个跨浏览器的类实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();	<span class="comment">// sarifi/firefox/chrome/IE7+</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.HTTPXML"</span>);	<span class="comment">// IE5/6</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果不考虑IE5/6，其实只需下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure>
<h2 id="Step2—发送请求"><a href="#Step2—发送请求" class="headerlink" title="Step2—发送请求"></a>Step2—发送请求</h2><ul>
<li><p><code>open()方法</code></p>
<table><thead><tr><th>参数</th><th>说明</th><th>取值</th></tr></thead><tbody><tr><td>method</td><td>请求类型，参数大写</td><td><code>POST</code>, <code>GET</code></td></tr><tr><td>URL</td><td>请求的URL地址</td><td><code>url</code></td></tr><tr><td>async</td><td>请求是否为异步模式，默认为<code>true</code></td><td><code>true</code>, <code>false</code></td></tr></tbody></table>
</li>
<li><p><code>send()方法</code></p>
<table><thead><tr><th>请求类型</th><th>参数</th></tr></thead><tbody><tr><td><code>POST</code></td><td><code>string</code></td></tr><tr><td><code>GET</code></td><td><code>null</code></td></tr></tbody></table>

</li>
</ul>
<h2 id="Step3—取得响应"><a href="#Step3—取得响应" class="headerlink" title="Step3—取得响应"></a>Step3—取得响应</h2><p>检查请求状态，监听<code>readyState</code>和<code>status</code>的变化</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (xhr.readystate === <span class="number">4</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</div><div class="line">      <span class="comment">// Success do something</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// Failed</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>readyState</code>取值如下</p>
<table><thead><tr><th align="left">readyState</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">请求未初始化，open方法未调用</td></tr><tr><td align="left">1</td><td align="left">服务器连接已建立，open方法已调用</td></tr><tr><td align="left">2</td><td align="left">请求已接受，收到头信息</td></tr><tr><td align="left">3</td><td align="left">请求处理中，收到响应体</td></tr><tr><td align="left">4</td><td align="left">请求已完成，响应完成</td></tr></tbody></table>

<p><code>status</code>取值如下</p>
<table><thead><tr><th>status</th><th>说明</th></tr></thead><tbody><tr><td>1XX</td><td>信息类，收到请求，表示正在处理</td></tr><tr><td>2XX</td><td>成功，表示用户请求被正确接收处理</td></tr><tr><td>3XX</td><td>重定向，表示请求没有成功</td></tr><tr><td>4XX</td><td>客户端错误</td></tr><tr><td>5XX</td><td>服务器错误</td></tr></tbody></table>

<p><a href="https://help.aliyun.com/knowledge_detail/6555009.html?spm=0.0.0.0.hIQaqR" target="_blank" rel="external">http状态码详解</a></p>
<h2 id="Step4—jQuery实现Ajax"><a href="#Step4—jQuery实现Ajax" class="headerlink" title="Step4—jQuery实现Ajax"></a>Step4—jQuery实现Ajax</h2><p>jQuery中提供了一个实现Ajax的方法即<code>jQuery.ajax([settings])</code>，参数如下：</p>
<table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>请求类型<code>POST</code> <code>GET</code></td></tr><tr><td>url</td><td>发送请求地址</td></tr><tr><td>data</td><td>一个对象，发送到服务器的数据</td></tr><tr><td>dataType</td><td>预期服务器返回的数据类型，一般采用<code>json</code></td></tr><tr><td>success</td><td>请求成功后的回调函数</td></tr><tr><td>error</td><td>请求失败后的回调函数</td></tr></tbody></table>

<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  type: <span class="string">"POST"</span>,</div><div class="line">  url: &lt;url&gt;</div><div class="line">  data: &lt;data&gt;,</div><div class="line">  dataType: "josn",</div><div class="line">  success: function() &#123;</div><div class="line">    // do something</div><div class="line">  &#125;,</div><div class="line">  error: function() &#123;</div><div class="line">    // do something</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Ajax即&lt;strong&gt;Asynchronous Javascript and XML&lt;/strong&gt;（异步的Javascript与XML技术），简单来说就是无需刷新整个页面就能更新用户界面，从而更快地响应用户行为的一套技术。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Ajax" scheme="http://coderfe.cn/tags/Ajax/"/>
    
      <category term="笔记" scheme="http://coderfe.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客Hexo &amp; Github Pages</title>
    <link href="http://coderfe.cn/2016/04/07/hexo-github-blog/"/>
    <id>http://coderfe.cn/2016/04/07/hexo-github-blog/</id>
    <published>2016-04-07T20:00:00.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>工欲善其事，必先利其器。在开发过程中用到的软件有<strong>Nodejs / Sublime Text3 / Git</strong>等，参考资料主要是<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">官方文档</a></p>
</blockquote>
<a id="more"></a>
<p>最终效果图：<br><img src="http://oaz5uxplb.bkt.clouddn.com/coderfee-blog-shot.png" alt="SimonCorner"></p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装很简单，只需要几分钟的时间，前提是已经安装了<strong>Nodejs</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div><div class="line">$ hexo -v</div></pre></td></tr></table></figure></p>
<h3 id="建立博客目录"><a href="#建立博客目录" class="headerlink" title="建立博客目录"></a>建立博客目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>上面的几行命令会把你指定的文件夹初始化为博客目录，目录如下：</p>
<!-- more -->
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;folder&gt;</div><div class="line">  _config.yml</div><div class="line">  package.json</div><div class="line">  scaffolds</div><div class="line">  source</div><div class="line">  	_drafts</div><div class="line">  	_posts</div><div class="line">  themes</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>有关站点的配置都在<code>&lt;folder&gt;/_config.yml</code> &amp; <code>&lt;folder&gt;/themes/_config.yml</code>文件中修改，具体参数参见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">官方文档</a></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li><code>hexo init &lt;folder&gt;</code>初始化</li>
<li><code>hexo new &lt;title&gt;</code>新建文章</li>
<li><code>hexo generate</code>生成静态文件<table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>–deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>–watch</code></td><td>监视文件变动</td></tr></tbody></table></li>
<li><code>hexo publish &lt;title&gt;</code>发表草稿</li>
<li><code>heox server</code>启动服务器<table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>–port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>–static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>–log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table></li>
<li><code>hexo deploy</code>部署网站<table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>–generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table></li>
<li><code>hexo clean</code>清除缓存文件<code>db.json</code>和静态文件<code>public</code></li>
<li><code>hexo list</code>列出网站资料</li>
</ul>
<h3 id="生成RSS"><a href="#生成RSS" class="headerlink" title="生成RSS"></a>生成RSS</h3><p>安装RSS插件<code>hexo-generator-feed</code>插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure></p>
<p>编辑站点配置文件：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> atom</div><div class="line"><span class="attr">  path:</span> atom.xml</div><div class="line"><span class="attr">  limit:</span> <span class="number">20</span></div></pre></td></tr></table></figure></p>
<h3 id="生成sitemap-xml"><a href="#生成sitemap-xml" class="headerlink" title="生成sitemap.xml"></a>生成sitemap.xml</h3><p>安装插件<code>hexo-generator-sitemap</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<p>编辑配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> sitemap.xml</div></pre></td></tr></table></figure>
<h3 id="通过Git方式部署"><a href="#通过Git方式部署" class="headerlink" title="通过Git方式部署"></a>通过Git方式部署</h3><p>编辑站点配置文件，如果部署在GitHub上会自动检测<code>branch</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> &lt;repo URL<span class="string">&gt;</span></div><div class="line"><span class="attr">  branch:</span> </div><div class="line"><span class="attr">  message:</span></div></pre></td></tr></table></figure></p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ol>
<li>首先得有个域名，申请域名的网站国外的有<a href="https://sg.godaddy.com/" target="_blank" rel="external">GoDaddy</a>等，国内的<a href="https://wanwang.aliyun.com" target="_blank" rel="external">万网</a>等</li>
<li>在<code>/source</code>目录下新建<code>CNAME</code>文件，输入自己的域名<code>coderfe.cn</code></li>
<li><p>登陆<a href="https://www.dnspod.cn/" target="_blank" rel="external">DnsPod</a>，添加域名解析，只需添加<strong>第一项</strong>和<strong>第四项</strong>就OK</p>
<p><img src="http://oaz5uxplb.bkt.clouddn.com/coderfee-dnspod.png" alt="解析记录"></p>
</li>
</ol>
<h2 id="用到的免费服务"><a href="#用到的免费服务" class="headerlink" title="用到的免费服务"></a>用到的免费服务</h2><ul>
<li><a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a></li>
<li><a href="https://www.dnspod.cn/" target="_blank" rel="external">DnsPod</a></li>
<li><a href="http://duoshuo.com/" target="_blank" rel="external">多说</a></li>
</ul>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><blockquote>
<p>2016-07-27 优化图片链接</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。在开发过程中用到的软件有&lt;strong&gt;Nodejs / Sublime Text3 / Git&lt;/strong&gt;等，参考资料主要是&lt;a href=&quot;https://hexo.io/zh-cn/docs/configuration.html&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://coderfe.cn/tags/blog/"/>
    
      <category term="GitHub Pages" scheme="http://coderfe.cn/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://coderfe.cn/2016/04/04/front-end-performance/"/>
    <id>http://coderfe.cn/2016/04/04/front-end-performance/</id>
    <published>2016-04-04T13:38:37.000Z</published>
    <updated>2016-08-17T14:37:18.868Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>时间黄金法则:</strong>只有10%-20%的时间花在下载HTML文档上,其余80%-90%都花在下载页面组件上，以下规则大部分都是摘自“雅虎军规”。</p>
</blockquote>
<a id="more"></a>
<h5 id="减少HTTP请求（打开网页的时候，我们看到的文字，图片，多媒体每个内容都是从服务器获取的，每一个内容的获取，就是一个HTTP请求）"><a href="#减少HTTP请求（打开网页的时候，我们看到的文字，图片，多媒体每个内容都是从服务器获取的，每一个内容的获取，就是一个HTTP请求）" class="headerlink" title="减少HTTP请求（打开网页的时候，我们看到的文字，图片，多媒体每个内容都是从服务器获取的，每一个内容的获取，就是一个HTTP请求）"></a>减少HTTP请求（打开网页的时候，我们看到的文字，图片，多媒体每个内容都是从服务器获取的，每一个内容的获取，就是一个HTTP请求）</h5><ul>
<li>图片<code>css sprite</code></li>
<li>图片地图,在一张图片上关联多个URL,URL最终指向取决于用户点击的位置<br><code>script</code>合并、<code>css</code>合并</li>
<li>内联图片,通过使用<code>data:URL</code>模式可以使页面包含图片但无需额外的HTTP请求</li>
</ul>
<h5 id="使用CDN内容分发网络（Content-Delivery-Network其目的在于让用户可就近取得所需内容，解决网络拥挤的状况，提高用户的访问速度）"><a href="#使用CDN内容分发网络（Content-Delivery-Network其目的在于让用户可就近取得所需内容，解决网络拥挤的状况，提高用户的访问速度）" class="headerlink" title="使用CDN内容分发网络（Content Delivery Network其目的在于让用户可就近取得所需内容，解决网络拥挤的状况，提高用户的访问速度）"></a>使用<code>CDN</code>内容分发网络（<code>Content Delivery Network</code>其目的在于让用户可就近取得所需内容，解决网络拥挤的状况，提高用户的访问速度）</h5><h5 id="压缩javascript和css-gzip"><a href="#压缩javascript和css-gzip" class="headerlink" title="压缩javascript和css(gzip)"></a>压缩<code>javascript</code>和<code>css</code>(gzip)</h5><ul>
<li>去除空格、空白符、注释符</li>
<li>简写方法名、参数名,精简<code>javascript</code>脚本</li>
<li><code>css</code>重用类,删除空的声明</li>
</ul>
<h5 id="css放在顶部head中-css-at-the-top"><a href="#css放在顶部head中-css-at-the-top" class="headerlink" title="css放在顶部head中(css at the top)"></a><code>css</code>放在顶部<code>head</code>中(css at the top)</h5><ul>
<li>避免页面出现空白或闪烁</li>
</ul>
<h5 id="script放在页面底部-script-at-the-bottom"><a href="#script放在页面底部-script-at-the-bottom" class="headerlink" title="script放在页面底部(script at the bottom)"></a><code>script</code>放在页面底部(script at the bottom)</h5><ul>
<li>先呈现出内容，避免浏览器因脚本出错而停止加载内容</li>
</ul>
<h5 id="避免在css中使用表达式，影响浏览器的性能"><a href="#避免在css中使用表达式，影响浏览器的性能" class="headerlink" title="避免在css中使用表达式，影响浏览器的性能"></a>避免在<code>css</code>中使用表达式，影响浏览器的性能</h5><h5 id="将javascript和css放在外部文件"><a href="#将javascript和css放在外部文件" class="headerlink" title="将javascript和css放在外部文件"></a>将<code>javascript</code>和<code>css</code>放在外部文件</h5><ul>
<li>单独提取<ul>
<li>提高复用性</li>
<li>减小页面体积</li>
<li>提高<code>js</code>和<code>css</code>的可维护性</li>
<li>可单独缓存</li>
</ul>
</li>
<li>写在页面内（样式只应用于一个页面，不被经常访问，脚本和样式很少&lt;20）<ul>
<li>减少页面请求</li>
<li>提升页面渲染速度</li>
</ul>
</li>
</ul>
<h5 id="减少DNS查询（DNS查找可以缓存起来以提升性能）"><a href="#减少DNS查询（DNS查找可以缓存起来以提升性能）" class="headerlink" title="减少DNS查询（DNS查找可以缓存起来以提升性能）"></a>减少DNS查询（DNS查找可以缓存起来以提升性能）</h5><ul>
<li>IE 30m</li>
<li>Chrome 60s</li>
<li>Firefox 60s</li>
<li>缓存时间长：减少DNS重复查找，节省时间</li>
<li>缓存时间短：及时检测网站服务器的变化，保证访问的正确性</li>
</ul>
<h5 id="避免重定向（用户的请求被重新转向其他请求）"><a href="#避免重定向（用户的请求被重新转向其他请求）" class="headerlink" title="避免重定向（用户的请求被重新转向其他请求）"></a>避免重定向（用户的请求被重新转向其他请求）</h5><ul>
<li>301：用户请求的页面被移动到其他位置，永久重定向，对搜索引擎更智能</li>
<li>302：用户请求的的页面被找到了，但不在原始地址，临时重定向</li>
<li>增加了服务器的往返次数</li>
</ul>
<h5 id="移除重复脚本"><a href="#移除重复脚本" class="headerlink" title="移除重复脚本"></a>移除重复脚本</h5><ul>
<li>重复脚本会增加不必要的HTTP请求和执行javascript所浪费的时间</li>
</ul>
<h5 id="配置实体标签（Enity-Tag-Web服务器和浏览器用于确认缓存组件有效的一种机制"><a href="#配置实体标签（Enity-Tag-Web服务器和浏览器用于确认缓存组件有效的一种机制" class="headerlink" title="配置实体标签（Enity Tag,Web服务器和浏览器用于确认缓存组件有效的一种机制)"></a>配置实体标签（<code>Enity Tag</code>,Web服务器和浏览器用于确认缓存组件有效的一种机制)</h5>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;时间黄金法则:&lt;/strong&gt;只有10%-20%的时间花在下载HTML文档上,其余80%-90%都花在下载页面组件上，以下规则大部分都是摘自“雅虎军规”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="性能优化" scheme="http://coderfe.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
